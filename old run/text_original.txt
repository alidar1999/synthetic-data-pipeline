#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <errno.h>
#include <sys/select.h>
#include <signal.h>
#include <wiringPi.h>
#include <wiringPiI2C.h>

// OLED display dimensions
#define OLED_WIDTH 128
#define OLED_HEIGHT 64

// OLED I2C address (typically 0x3C or 0x3D)
#define OLED_ADDRESS 0x3C

// Serial port paths for PMS5003 sensors
#define SENSOR1_PORT "/dev/ttyAMA0"
#define SENSOR2_PORT "/dev/ttyS0"

// Function prototypes
int readPMS5003(const char* serialPort, int* pm1_0, int* pm2_5, int* pm10);
int oled_write_command(int fd, int command);
int oled_write_data(int fd, unsigned char data);
int oled_display_text(int fd, int x, int y, const char* text);
void displayAirQuality(int oled_fd, int pm1_0_sensor1, int pm2_5_sensor1, int pm10_sensor1, int pm1_0_sensor2, int pm2_5_sensor2, int pm10_sensor2);
void cleanup(int signum);

// Global variable for OLED file descriptor
int oled_fd = -1;

// Signal handler for graceful shutdown
void cleanup(int signum) {
    printf("\nCaught signal %d, cleaning up...\n", signum);
    if (oled_fd != -1) {
        close(oled_fd);
    }
    exit(0);
}

// Function to read data from a PMS5003 sensor
int readPMS5003(const char* serialPort, int* pm1_0, int* pm2_5, int* pm10) {
    int fd = open(serialPort, O_RDONLY | O_NOCTTY);
    if (fd < 0) {
        fprintf(stderr, "Error opening serial port %s: %s\n", serialPort, strerror(errno));
        return -1;
    }

    struct termios tty;
    memset(&tty, 0, sizeof(tty));
    if (tcgetattr(fd, &tty) != 0) {
        fprintf(stderr, "Error from tcgetattr: %s\n", strerror(errno));
        close(fd);
        return -1;
    }

    tty.c_cflag = B9600 | CS8 | CLOCAL | CREAD;
    tty.c_iflag = IGNPAR;
    tty.c_oflag = 0;
    tty.c_lflag = 0;
    tty.c_cc[VMIN] = 1;  // Read at least 1 character
    tty.c_cc[VTIME] = 5; // Wait for 0.5 seconds (5 * 0.1s)

    if (tcsetattr(fd, TCSANOW, &tty) != 0) {
        fprintf(stderr, "Error from tcsetattr: %s\n", strerror(errno));
        close(fd);
        return -1;
    }

    unsigned char buffer[32];
    unsigned char start_byte1, start_byte2;
    int i = 0;
    int retry = 0;

    while (retry < 5) {
        // Read until start bytes are found or timeout
        while (i < 2) {
            if (read(fd, &buffer[i], 1) != 1) {
                if (errno == EAGAIN || errno == EWOULDBLOCK) {
                    // Timeout occurred
                    fprintf(stderr, "Timeout waiting for start bytes on %s\n", serialPort);
                    break;
                } else {
                    fprintf(stderr, "Error reading serial port %s: %s\n", serialPort, strerror(errno));
                    close(fd);
                    return -1;
                }
            }
            if (i == 0 && buffer[0] == 0x42) {
                i++;
            } else if (i == 1 && buffer[1] == 0x4d) {
                i++;
            } else {
                i = 0; // Reset if start bytes are incorrect
            }
        }

        if (i == 2) {
            // Read the rest of the data frame
            if (read(fd, &buffer[2], 30) != 30) {
                fprintf(stderr, "Error reading data frame on %s: %s\n", serialPort, strerror(errno));
                close(fd);
                return -1;
            }

            // Verify checksum
            unsigned short checksum = 0;
            for (int j = 0; j < 30 + 2 - 2; j++) {
                checksum += buffer[j];
            }
            unsigned short received_checksum = (buffer[30] << 8) | buffer[31];

            if (checksum == received_checksum) {
                *pm1_0 = (buffer[10] << 8) | buffer[11];
                *pm2_5 = (buffer[12] << 8) | buffer[13];
                *pm10 = (buffer[14] << 8) | buffer[15];
                close(fd);
                return 0; // Success
            } else {
                fprintf(stderr, "Checksum error on %s\n", serialPort);
                i = 0; // Reset and retry
            }
        } else {
            retry++;
            i = 0;
        }
    }

    fprintf(stderr, "Failed to read valid data from %s after multiple retries\n", serialPort);
    close(fd);
    return -1; // Error
}

// Function to write a command to the OLED display
int oled_write_command(int fd, int command) {
    if (wiringPiI2CWriteReg8(fd, 0x00, command) < 0) {
        fprintf(stderr, "Error writing command to OLED: %s\n", strerror(errno));
        return -1;
    }
    return 0;
}

// Function to write data to the OLED display
int oled_write_data(int fd, unsigned char data) {
    if (wiringPiI2CWriteReg8(fd, 0x40, data) < 0) {
        fprintf(stderr, "Error writing data to OLED: %s\n", strerror(errno));
        return -1;
    }
    return 0;
}

// Function to display text on the OLED screen
int oled_display_text(int fd, int x, int y, const char* text) {
    // Simple 5x7 font (example)
    unsigned char font[][5] = {
        {0x00, 0x00, 0x00, 0x00, 0x00},   // Space
        {0x00, 0x00, 0x5f, 0x00, 0x00},   // !
        {0x00, 0x1c, 0x22, 0x41, 0x00},   // "
        {0x00, 0x14, 0x3e, 0x14, 0x3e},   // #
        {0x00, 0x24, 0x7d, 0x2a, 0x12},   // $
        {0x00, 0x24, 0x14, 0x08, 0x00}    // %
    };

    int i, j, k;
    int len = strlen(text);

    for (i = 0; i < len; i++) {
        char c = text[i];
        if (c >= ' ' && c <= '%') {
            int charIndex = c - ' ';
            for (j = 0; j < 5; j++) {
                // Calculate the column address
                int col = x + i * 6 + j;
                // Calculate the page address
                int page = y / 8;

                // Write the font data to the OLED
                oled_write_command(fd, 0xb0 + page); // Set page address
                oled_write_command(fd, 0x00 + (col & 0x0f)); // Set lower column address
                oled_write_command(fd, 0x10 + ((col >> 4) & 0x0f)); // Set higher column address
                oled_write_data(fd, font[charIndex][j]); // Write the data
            }
        }
    }
    return 0;
}

// Function to clear the OLED screen
void oled_clear(int fd) {
    for (int page = 0; page < 8; page++) {
        oled_write_command(fd, 0xb0 + page); // Set page address
        oled_write_command(fd, 0x00);       // Set lower column address
        oled_write_command(fd, 0x10);       // Set higher column address
        for (int col = 0; col < 128; col++) {
            oled_write_data(fd, 0x00); // Clear the pixel
        }
    }
}

// Function to display air quality data on the OLED screen
void displayAirQuality(int oled_fd, int pm1_0_sensor1, int pm2_5_sensor1, int pm10_sensor1, int pm1_0_sensor2, int pm2_5_sensor2, int pm10_sensor2) {
    char buffer[64];

    oled_clear(oled_fd);

    sprintf(buffer, "Sensor 1:");
    oled_display_text(oled_fd, 0, 0, buffer);

    sprintf(buffer, "PM1.0: %d ug/m3", pm1_0_sensor1);
    oled_display_text(oled_fd, 0, 8, buffer);

    sprintf(buffer, "PM2.5: %d ug/m3", pm2_5_sensor1);
    oled_display_text(oled_fd, 0, 16, buffer);

    sprintf(buffer, "PM10: %d ug/m3", pm10_sensor1);
    oled_display_text(oled_fd, 0, 24, buffer);

    sprintf(buffer, "Sensor 2:");
    oled_display_text(oled_fd, 0, 32, buffer);

    sprintf(buffer, "PM1.0: %d ug/m3", pm1_0_sensor2);
    oled_display_text(oled_fd, 0, 40, buffer);

    sprintf(buffer, "PM2.5: %d ug/m3", pm2_5_sensor2);
    oled_display_text(oled_fd, 0, 48, buffer);

    sprintf(buffer, "PM10: %d ug/m3", pm10_sensor2);
    oled_display_text(oled_fd, 0, 56, buffer);
}

int main() {
    // Install signal handler for graceful shutdown
    signal(SIGINT, cleanup);

    // Initialize wiringPi
    if (wiringPiSetup() == -1) {
        fprintf(stderr, "Error initializing wiringPi\n");
        return 1;
    }

    // Initialize I2C communication with the OLED display
    oled_fd = wiringPiI2CSetup(OLED_ADDRESS);
    if (oled_fd == -1) {
        fprintf(stderr, "Error initializing I2C communication with OLED: %s\n", strerror(errno));
        return 1;
    }

    // OLED Initialization sequence (example for SSD1306)
    oled_write_command(oled_fd, 0xAE); // Display off
    oled_write_command(oled_fd, 0xD5); // Set display clock divide ratio/oscillator frequency
    oled_write_command(oled_fd, 0x80); // --ratio
    oled_write_command(oled_fd, 0xA8); // Setup multiplexer
    oled_write_command(oled_fd, 0x3F); // --height
    oled_write_command(oled_fd, 0xD3); // Set display offset
    oled_write_command(oled_fd, 0x00); // --offset
    oled_write_command(oled_fd, 0x40); // Set start line address
    oled_write_command(oled_fd, 0x8D); // Charge pump
    oled_write_command(oled_fd, 0x14); // --enable
    oled_write_command(oled_fd, 0x20); // Memory mode
    oled_write_command(oled_fd, 0x00); // --mode
    oled_write_command(oled_fd, 0xA1); // Segremap
    oled_write_command(oled_fd, 0xC8); // Comscan dec
    oled_write_command(oled_fd, 0xDA); // Set com pins hardware configuration
    oled_write_command(oled_fd, 0x12); // --config
    oled_write_command(oled_fd, 0x81); // Set contrast
    oled_write_command(oled_fd, 0xCF); // --contrast
    oled_write_command(oled_fd, 0xD9); // Set precharge
    oled_write_command(oled_fd, 0xF1); // --precharge
    oled_write_command(oled_fd, 0xDB); // Set vcom detect
    oled_write_command(oled_fd, 0x40); // --vcomdetect
    oled_write_command(oled_fd, 0xA4); // Display all pixels off
    oled_write_command(oled_fd, 0xA6); // Display normal (non-inverted)
    oled_write_command(oled_fd, 0xAF); // Display on

    int pm1_0_sensor1, pm2_5_sensor1, pm10_sensor1;
    int pm1_0_sensor2, pm2_5_sensor2, pm10_sensor2;

    while (1) {
        // Read data from PMS5003 sensors
        int sensor1_status = readPMS5003(SENSOR1_PORT, &pm1_0_sensor1, &pm2_5_sensor1, &pm10_sensor1);
        int sensor2_status = readPMS5003(SENSOR2_PORT, &pm1_0_sensor2, &pm2_5_sensor2, &pm10_sensor2);

        if (sensor1_status == 0 && sensor2_status == 0) {
            // Display air quality data on the OLED screen
            displayAirQuality(oled_fd, pm1_0_sensor1, pm2_5_sensor1, pm10_sensor1, pm1_0_sensor2, pm2_5_sensor2, pm10_sensor2);
        } else {
            oled_clear(oled_fd);
            if (sensor1_status != 0) {
                oled_display_text(oled_fd, 0, 0, "Sensor 1 Error");
            }
            if (sensor2_status != 0) {
                oled_display_text(oled_fd, 0, 32, "Sensor 2 Error");
            }
        }

        delay(2000); // Delay for 2 seconds
    }

    return 0;
}